% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runGenericDiscovery.R
\name{runGenericDiscovery}
\alias{runGenericDiscovery}
\title{This function orchestrates the MassExpression workflow (could be called by a  workflow step)}
\usage{
runGenericDiscovery(
  experimentDesign,
  proteinIntensities,
  normalisationMethod = "None",
  species,
  labellingMethod,
  fitSeparateModels = TRUE,
  returnDecideTestColumn = FALSE
)
}
\arguments{
\item{experimentDesign}{data.frame. Experiment design provided in input by the user. Required columsn are: `SampleName` and `Condition`.}

\item{proteinIntensities}{data.frame. Wide matrix of intensities. Rows are proteins and columns are SampleNames. Required column: `ProteinId`.}

\item{normalisationMethod}{Normalisation method. One of "None" or "Median".}

\item{species}{Species. One of 'Human', 'Mouse', 'Yeast', 'Other'}

\item{labellingMethod}{One of 'LFQ' or 'TMT'}

\item{fitSeparateModels}{logical. TRUE to fit separate limma models for each pairwise comparisons 
(e.g. filtering and `lmFit` are run separately by comparison).}

\item{returnDecideTestColumn}{logical. If TRUE the row data of the `CompleteIntensityExperiment` will contain the output from 
`limma::decideTests`. 
if FALSE a single model is run for all contrasts.}
}
\value{
List of two SummarisedExperiment objects: `IntensityExperiment` 
containing the raw intensities and  `CompleteIntensityExperiment` including 
imputed intensities and the results of the limma DE analysis.
}
\description{
This function orchestrates the MassExpression workflow (could be called by a  workflow step)
}
\examples{
design <- fragpipe_data$design
intensities <- fragpipe_data$intensities
parameters <- fragpipe_data$parameters
normalisation_method <- parameters[parameters[,1] == "UseNormalisationMethod",2]
species <- parameters[parameters[,1] == "Species",2]
labellingMethod <- parameters[parameters[,1] == "LabellingMethod",2]
listIntensityExperiments <- runGenericDiscovery(experimentDesign = design, 
proteinIntensities = intensities, 
normalisationMethod = normalisation_method,
species = species, 
labellingMethod = labellingMethod)
}
